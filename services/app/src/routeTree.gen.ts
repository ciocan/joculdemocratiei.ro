/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as JocNouImport } from './routes/joc-nou'
import { Route as IncepeImport } from './routes/incepe'
import { Route as IndexImport } from './routes/index'
import { Route as UUserIdImport } from './routes/u/$userId'
import { Route as JRoomIdImport } from './routes/j/$roomId'
import { Route as UUserIdJRoomIdImport } from './routes/u_/$userId/j/$roomId'

// Create/Update Routes

const JocNouRoute = JocNouImport.update({
  id: '/joc-nou',
  path: '/joc-nou',
  getParentRoute: () => rootRoute,
} as any)

const IncepeRoute = IncepeImport.update({
  id: '/incepe',
  path: '/incepe',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UUserIdRoute = UUserIdImport.update({
  id: '/u/$userId',
  path: '/u/$userId',
  getParentRoute: () => rootRoute,
} as any)

const JRoomIdRoute = JRoomIdImport.update({
  id: '/j/$roomId',
  path: '/j/$roomId',
  getParentRoute: () => rootRoute,
} as any)

const UUserIdJRoomIdRoute = UUserIdJRoomIdImport.update({
  id: '/u_/$userId/j/$roomId',
  path: '/u/$userId/j/$roomId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/incepe': {
      id: '/incepe'
      path: '/incepe'
      fullPath: '/incepe'
      preLoaderRoute: typeof IncepeImport
      parentRoute: typeof rootRoute
    }
    '/joc-nou': {
      id: '/joc-nou'
      path: '/joc-nou'
      fullPath: '/joc-nou'
      preLoaderRoute: typeof JocNouImport
      parentRoute: typeof rootRoute
    }
    '/j/$roomId': {
      id: '/j/$roomId'
      path: '/j/$roomId'
      fullPath: '/j/$roomId'
      preLoaderRoute: typeof JRoomIdImport
      parentRoute: typeof rootRoute
    }
    '/u/$userId': {
      id: '/u/$userId'
      path: '/u/$userId'
      fullPath: '/u/$userId'
      preLoaderRoute: typeof UUserIdImport
      parentRoute: typeof rootRoute
    }
    '/u_/$userId/j/$roomId': {
      id: '/u_/$userId/j/$roomId'
      path: '/u/$userId/j/$roomId'
      fullPath: '/u/$userId/j/$roomId'
      preLoaderRoute: typeof UUserIdJRoomIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/incepe': typeof IncepeRoute
  '/joc-nou': typeof JocNouRoute
  '/j/$roomId': typeof JRoomIdRoute
  '/u/$userId': typeof UUserIdRoute
  '/u/$userId/j/$roomId': typeof UUserIdJRoomIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/incepe': typeof IncepeRoute
  '/joc-nou': typeof JocNouRoute
  '/j/$roomId': typeof JRoomIdRoute
  '/u/$userId': typeof UUserIdRoute
  '/u/$userId/j/$roomId': typeof UUserIdJRoomIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/incepe': typeof IncepeRoute
  '/joc-nou': typeof JocNouRoute
  '/j/$roomId': typeof JRoomIdRoute
  '/u/$userId': typeof UUserIdRoute
  '/u_/$userId/j/$roomId': typeof UUserIdJRoomIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/incepe'
    | '/joc-nou'
    | '/j/$roomId'
    | '/u/$userId'
    | '/u/$userId/j/$roomId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/incepe'
    | '/joc-nou'
    | '/j/$roomId'
    | '/u/$userId'
    | '/u/$userId/j/$roomId'
  id:
    | '__root__'
    | '/'
    | '/incepe'
    | '/joc-nou'
    | '/j/$roomId'
    | '/u/$userId'
    | '/u_/$userId/j/$roomId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  IncepeRoute: typeof IncepeRoute
  JocNouRoute: typeof JocNouRoute
  JRoomIdRoute: typeof JRoomIdRoute
  UUserIdRoute: typeof UUserIdRoute
  UUserIdJRoomIdRoute: typeof UUserIdJRoomIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  IncepeRoute: IncepeRoute,
  JocNouRoute: JocNouRoute,
  JRoomIdRoute: JRoomIdRoute,
  UUserIdRoute: UUserIdRoute,
  UUserIdJRoomIdRoute: UUserIdJRoomIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/incepe",
        "/joc-nou",
        "/j/$roomId",
        "/u/$userId",
        "/u_/$userId/j/$roomId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/incepe": {
      "filePath": "incepe.tsx"
    },
    "/joc-nou": {
      "filePath": "joc-nou.tsx"
    },
    "/j/$roomId": {
      "filePath": "j/$roomId.tsx"
    },
    "/u/$userId": {
      "filePath": "u/$userId.tsx"
    },
    "/u_/$userId/j/$roomId": {
      "filePath": "u_/$userId/j/$roomId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
